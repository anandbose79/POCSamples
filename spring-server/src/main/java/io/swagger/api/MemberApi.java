/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.MemberInformation;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-02-25T21:55:56.404Z")

@Api(value = "member", description = "the member API")
public interface MemberApi {

    @ApiOperation(value = "create member informatoin", notes = "This method will create the member information", response = Void.class, tags={ "CreateMemberInformation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/member/memberCRUD",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createMemberInfo(@ApiParam(value = ""  )  @Valid @RequestBody MemberInformation memberinfo);


    @ApiOperation(value = "delete member informatoin", notes = "This method will delete the member information", response = Void.class, tags={ "DeleteMemberInformation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/member/memberCRUD",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMemberInfo(@ApiParam(value = ""  )  @Valid @RequestBody MemberInformation memberinfo);


    @ApiOperation(value = "Get member informatoin", notes = "This method will retreive the member information", response = MemberInformation.class, responseContainer = "List", tags={ "GetMemberInformation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = MemberInformation.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/member/{memberId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MemberInformation>> getMemberInfo(@ApiParam(value = "member ID",required=true ) @PathVariable("memberId") String memberId);


    @ApiOperation(value = "Get member informatoin by Name", notes = "This method will retreive the member information by Name", response = MemberInformation.class, responseContainer = "List", tags={ "GetMemberInformationbyName", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = MemberInformation.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/member/findbyName",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MemberInformation>> getMemberInfobyName( @NotNull@ApiParam(value = "name of the memberId", required = true) @RequestParam(value = "memberName", required = true) String memberName);


    @ApiOperation(value = "update member informatoin", notes = "This method will retreive the member information", response = Void.class, tags={ "UpdateMemberInformation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class),
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/member/memberCRUD",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateMemberInfo(@ApiParam(value = ""  )  @Valid @RequestBody MemberInformation memberinfo);

}
